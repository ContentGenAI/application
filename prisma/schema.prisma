datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
    binaryTargets   = ["native", "rhel-openssl-3.0.x"]

}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  subscription  Subscription?
  business      BusinessProfile?
  contents      Content[]
  socialAccounts SocialAccount[]
}

model Subscription {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  plan          String   // "basic" | "pro" | "premium"
  status        String   // "active" | "canceled"
  stripeId      String?
  renewalDate   DateTime?
  postsThisMonth Int     @default(0)  // Track monthly usage
  resetDate     DateTime @default(now())  // When to reset counter
}

model BusinessProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  businessName  String
  industry      String
  tone          String
  keywords      String[]
  targetAudience String
}

model Content {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  title         String
  text          String
  hashtags      String[]
  platform      String    // "instagram" | "linkedin" | etc
  scheduledAt   DateTime?
  publishedAt   DateTime?
  status        String    @default("draft") // "draft" | "scheduled" | "published" | "failed"
  imageUrl      String?
  createdAt     DateTime  @default(now())
}

model SocialAccount {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  platform     String   // "facebook" | "instagram" | "linkedin"
  accountId    String?  // page or profile ID
  accountName  String?  // Display name
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, platform])
}

